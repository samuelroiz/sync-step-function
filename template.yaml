AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
  
Resources:

  SAMLogs:  
    Type: AWS::Logs::LogGroup

  OrdersApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      FailOnWarnings: True
      DefinitionBody:
        info:
          version: '1.0'
          title:
            Ref: AWS::StackName
        paths:
          "/order":
            post:
              responses: 
                default:
                  description: "Default response for POST /"
              x-amazon-apigateway-integration:
                integrationSubtype: "StepFunctions-StartSyncExecution"
                credentials:
                  Fn::GetAtt: [HttpApiRole, Arn]
                requestParameters:
                  Input: "$request.body"
                  StateMachineArn: !Ref OrderStateMachine
                payloadFormatVersion: "1.0"
                type: "aws_proxy"
                connectionType: "INTERNET"
        openapi: 3.0.1
        x-amazon-apigateway-cors:
          allowMethods:
            - "POST"
          allowHeaders:
            - "content-type"
          maxAge: 0
          allowCredentials: false
          allowOrigins:
          - "*"
        x-amazon-apigateway-importexport-version: "1.0"

  OrderStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: order.asl.json
      DefinitionSubstitutions:
        MakePaymentFunctionArn: !GetAtt MakePaymentFunction.Arn
        MakeOrderFunctionArn: !GetAtt MakeOrderFunction.Arn
        OrderFailureFunctionArn: !GetAtt OrderFailureFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SAMLogs.Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref MakePaymentFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref MakeOrderFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref OrderFailureFunction
        - CloudWatchLogsFullAccess
  
  MakePaymentFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./makePaymentFunction
      Handler: payment.handler
      Runtime: nodejs18.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable

  MakeOrderFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./makeOrderFunction
      Handler: order.handler
      Runtime: nodejs18.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable    

  OrderFailureFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./orderFailureFunction
      Handler: orderFailure.handler
      Runtime: nodejs18.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          ORDERS_TABLE: !Ref OrdersTable

  OrdersTable:
    Type: AWS::Serverless::SimpleTable
  
  HttpApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: AllowSFNExec
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "states:StartSyncExecution"
              Resource: !Ref OrderStateMachine

Outputs:
  OrderApi:
    Description: "API Gateway endpoint URL for Prod stage for Order function"
    Value: !Sub "https://${OrdersApi}.execute-api.${AWS::Region}.amazonaws.com/order"
